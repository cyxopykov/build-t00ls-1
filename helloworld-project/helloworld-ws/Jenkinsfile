pipeline {
    agent any
    
    options {
        copyArtifactPermission('MNTLAB-asukharukau-child1-build-job');
    }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "mvn3"
    }

    stages {
        stage('Package') {
            steps {
                // Get some code from a GitHub repository
                git branch: 'asukharukau-final-task', url: 'https://github.com/cyxopykov/build-t00ls-1.git'

                // Run Maven on a Unix agent.
                dir('helloworld-project/helloworld-ws/') {
                  sh 'mvn -Dmaven.test.failure.ignore=true clean package'
                }

            }
       }
       

        
        stage ('Scan Sonar') {
            steps{
            script {
                echo "Start Sonar Scan"
                dir('helloworld-project/helloworld-ws/') {
                withSonarQubeEnv('sonarqube') {
                    sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
                            -Dsonar.projectKey=sonar-final-task \
                            -Dsonar.host.url=http://192.168.56.2:9000 \
                            -Dsonar.language=java -Dsonar.qualitygate.wait=true \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.java.binaries=target \
                            -Dsonar.sources=src/main/ \
                            -Dsonar.tests=src/test/ "
                }
                }
            }
            }
        }
        
        
        stage('Testing') { 
            parallel {
                stage('pre-integration-test') {
                    steps{
                    script {
                        dir('helloworld-project/helloworld-ws/') {
                            sh 'echo mvn pre-integration-test' 
                        }
                    }
                    }
                }
                
                stage('integration-test') {
                    steps{
                    script {
                        dir('helloworld-project/helloworld-ws/') {
                            sh 'echo mvn integration-test' 
                        }
                    }
                    }
                }
                
                stage('post-integration-test') {
                    steps{
                    script {
                        dir('helloworld-project/helloworld-ws/') {
                            sh 'echo mvn post-integration-test' 
                        }
                    }
                    }
                }
            }
        }
        
        stage('Triggering job and fetching artefact') {
          steps{
            script{
                build job: 'MNTLAB-asukharukau-child1-build-job', 
                  parameters: [
                    string(name: 'BRANCH_NAME', value: 'asukharukau')
                  ],
                  wait : true
                  copyArtifacts fingerprintArtifacts: true, 
                    projectName: 'MNTLAB-asukharukau-child1-build-job', selector: lastSuccessful()           
            }
          }
        }
        
        stage('Building image') {
            steps{
                sh '''
                    docker build -f helloworld-project/helloworld-ws/Dockerfile -t 192.168.56.2:5000/helloworld-asukharukau:$BUILD_NUMBER -t 192.168.56.2:5000/helloworld-asukharukau:latest .
                    docker login -u ${nexus_user} -p ${nexus_password} 192.168.56.2:5000
                    docker push 192.168.56.2:5000/helloworld-asukharukau:$BUILD_NUMBER
                    docker push 192.168.56.2:5000/helloworld-asukharukau:latest
                '''
            }
        }
                
        stage('Deploy App') {
          steps {
                           
              script {
                    withKubeConfig([credentialsId: 'minikubeconfig']) {
                        sh '''
                            sed -i -e "s,<IMAGE>,192.168.56.2:5000/helloworld-asukharukau:$BUILD_NUMBER,g" ./helloworld-project/helloworld-ws/deploy.yaml
                            curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"
                            chmod u+x ./kubectl
                            ./kubectl create ns asukharukau || echo 'ns already exists!'
                            ./kubectl create secret -n asukharukau docker-registry nexus --docker-server=192.168.56.2:5000 --docker-username=${nexus_user} --docker-password=${nexus_password} \
                            || echo 'Secret already exists!'
                            ./kubectl apply -f ./helloworld-project/helloworld-ws/deploy.yaml
                        '''
                    }
                }
          }
        }
        
        
        
    }
}
    

    
